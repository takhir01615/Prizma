<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PRIZMA - Персональный AI Ассистент</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(45deg, #667eea, #764ba2);
            --accent-color: #667eea;
            --text-dark: #333;
            --text-light: #666;
            --bg-light: #f8f9fa;
            --border-color: #e9ecef;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--primary-gradient);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            width: 100%;
            max-width: 1400px;
            height: 95vh;
            background: rgba(255, 255, 255, 0.98);
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        /* AUTH SCREEN */
        .auth-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            text-align: center;
            padding: 40px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
        }

        .logo {
            font-size: 4.5rem;
            font-weight: 900;
            background: var(--secondary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .subtitle {
            font-size: 1.3rem;
            color: var(--text-light);
            margin-bottom: 30px;
            font-weight: 300;
        }

        .acronym {
            font-size: 1rem;
            color: var(--text-light);
            margin-bottom: 40px;
            line-height: 1.8;
            max-width: 600px;
            background: rgba(255,255,255,0.7);
            padding: 20px;
            border-radius: 15px;
            border-left: 4px solid var(--accent-color);
        }

        .auth-form {
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            min-width: 350px;
            backdrop-filter: blur(10px);
        }

        .input-group {
            margin-bottom: 25px;
            position: relative;
        }

        .input-group i {
            position: absolute;
            left: 15px;
            top: 15px;
            color: var(--text-light);
        }

        input {
            width: 100%;
            padding: 15px 15px 15px 45px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: rgba(255,255,255,0.9);
        }

        input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .btn {
            width: 100%;
            padding: 15px;
            background: var(--secondary-gradient);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
            position: relative;
            overflow: hidden;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #6c757d, #495057);
        }

        .btn-secondary:hover {
            box-shadow: 0 10px 25px rgba(108, 117, 125, 0.3);
        }

        /* CHAT INTERFACE */
        .chat-interface {
            display: none;
            height: 100%;
            flex-direction: column;
        }

        .chat-header {
            background: var(--secondary-gradient);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            background: var(--success-color);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .chat-content {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        .sidebar {
            width: 320px;
            background: var(--bg-light);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            background: white;
        }

        .new-chat-btn {
            width: 100%;
            padding: 12px;
            background: var(--secondary-gradient);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .new-chat-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .chat-history {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .main-chat {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: linear-gradient(135deg, #fafafa 0%, #f0f0f0 100%);
        }

        .messages {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
            scroll-behavior: smooth;
        }

        .message {
            margin-bottom: 25px;
            padding: 20px;
            border-radius: 18px;
            max-width: 85%;
            position: relative;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message.user {
            background: var(--secondary-gradient);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .message.assistant {
            background: white;
            border: 1px solid var(--border-color);
            border-bottom-left-radius: 5px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            font-size: 0.9em;
            opacity: 0.8;
        }

        .message-content {
            line-height: 1.6;
        }

        .input-area {
            padding: 25px 30px;
            background: white;
            border-top: 1px solid var(--border-color);
            box-shadow: 0 -5px 15px rgba(0,0,0,0.05);
        }

        .input-container {
            display: flex;
            gap: 15px;
            align-items: flex-end;
        }

        .message-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid var(--border-color);
            border-radius: 25px;
            font-size: 16px;
            resize: none;
            min-height: 50px;
            max-height: 150px;
            font-family: inherit;
            transition: all 0.3s ease;
        }

        .message-input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .send-btn {
            padding: 15px 25px;
            background: var(--secondary-gradient);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            min-width: 120px;
            transition: all 0.3s ease;
        }

        .send-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .send-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .history-item {
            padding: 15px;
            margin-bottom: 10px;
            background: white;
            border-radius: 12px;
            cursor: pointer;
            border-left: 4px solid var(--accent-color);
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .history-item:hover {
            background: #f8f9fa;
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .history-item.active {
            background: var(--accent-color);
            color: white;
        }

        .typing {
            display: none;
            padding: 20px;
            color: var(--text-light);
            font-style: italic;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .typing-dots {
            display: flex;
            gap: 3px;
        }

        .typing-dots span {
            width: 8px;
            height: 8px;
            background: var(--accent-color);
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
        .typing-dots span:nth-child(2) { animation-delay: -0.16s; }

        @keyframes typing {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1); opacity: 1; }
        }

        /* API STATUS */
        .api-status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 10px 15px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            font-size: 0.9em;
            display: flex;
            align-items: center;
            gap: 8px;
            z-index: 1000;
        }

        .api-status.online {
            border-left: 4px solid var(--success-color);
        }

        .api-status.offline {
            border-left: 4px solid var(--danger-color);
        }

        /* LOADING */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* RESPONSIVE */
        @media (max-width: 768px) {
            .container {
                height: 100vh;
                border-radius: 0;
                max-width: 100%;
            }
            
            .sidebar {
                display: none;
            }
            
            .logo {
                font-size: 3rem;
            }
            
            .auth-form {
                min-width: auto;
                width: 100%;
                max-width: 400px;
                margin: 0 20px;
            }

            .messages {
                padding: 20px 15px;
            }

            .message {
                max-width: 95%;
            }

            .input-area {
                padding: 20px 15px;
            }
        }

        /* DARK MODE TOGGLE */
        .theme-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            background: var(--secondary-gradient);
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            font-size: 1.2em;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .theme-toggle:hover {
            transform: scale(1.1);
        }

        /* SPECIAL EFFECTS */
        .sparkle {
            position: relative;
            overflow: visible;
        }

        .sparkle::before {
            content: '✨';
            position: absolute;
            top: -10px;
            right: -10px;
            animation: sparkle 2s infinite;
        }

        @keyframes sparkle {
            0%, 100% { opacity: 0; transform: scale(0.5) rotate(0deg); }
            50% { opacity: 1; transform: scale(1) rotate(180deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- API Status Indicator -->
        <div class="api-status online" id="apiStatus">
            <i class="fas fa-circle"></i>
            <span>PRIZMA Online</span>
        </div>

        <!-- Auth Screen -->
        <div class="auth-screen" id="authScreen">
            <div class="logo sparkle">PRIZMA</div>
            <div class="subtitle">Ваш персональный ИИ-ассистент с памятью и реальными данными</div>
            <div class="acronym">
                <strong>P</strong>ersonalized <strong>R</strong>esponse <strong>I</strong>ntegrated <strong>Z</strong>one for <strong>M</strong>achine <strong>A</strong>ssistance<br>
                <em>Персонализированная зона интегрированных ответов для машинной помощи</em><br><br>
                🔍 Поиск в реальном времени • 📰 Актуальные новости • 🌤️ Погода • 💱 Курсы валют
            </div>
            
            <div class="auth-form">
                <div class="input-group">
                    <i class="fas fa-user"></i>
                    <input type="text" id="username" placeholder="Введите ваше имя" />
                </div>
                <div class="input-group">
                    <i class="fas fa-lock"></i>
                    <input type="password" id="password" placeholder="Введите пароль" />
                </div>
                <button class="btn" onclick="login()">
                    <i class="fas fa-sign-in-alt"></i> Войти в PRIZMA
                </button>
                <button class="btn btn-secondary" onclick="guestLogin()">
                    <i class="fas fa-user-secret"></i> Гостевой режим
                </button>
            </div>
        </div>

        <!-- Chat Interface -->
        <div class="chat-interface" id="chatInterface">
            <div class="chat-header">
                <div class="user-info">
                    <div class="status-indicator"></div>
                    <span id="welcomeText">Добро пожаловать в PRIZMA</span>
                </div>
                <div style="display: flex; gap: 15px; align-items: center;">
                    <span id="messageCounter">0 сообщений</span>
                    <button class="btn" onclick="logout()" style="padding: 8px 16px; font-size: 14px;">
                        <i class="fas fa-sign-out-alt"></i> Выйти
                    </button>
                </div>
            </div>

            <div class="chat-content">
                <div class="sidebar">
                    <div class="sidebar-header">
                        <button class="new-chat-btn" onclick="startNewChat()">
                            <i class="fas fa-plus"></i> Новый чат
                        </button>
                    </div>
                    <div class="chat-history" id="chatHistory">
                        <!-- История загружается здесь -->
                    </div>
                </div>

                <div class="main-chat">
                    <div class="messages" id="messages">
                        <div class="message assistant">
                            <div class="message-header">
                                <i class="fas fa-robot"></i>
                                <span>PRIZMA</span>
                                <span style="font-size: 0.8em;">Сейчас</span>
                            </div>
                            <div class="message-content">
                                🎉 <strong>Добро пожаловать в PRIZMA!</strong><br><br>
                                
                                Я ваш персональный ИИ-ассистент с расширенными возможностями:<br><br>
                                
                                🔍 <strong>Умный поиск:</strong> Ищу актуальную информацию в интернете<br>
                                📰 <strong>Новости:</strong> Последние события в мире и России<br>
                                🌤️ <strong>Погода:</strong> Прогноз для любого города<br>
                                💱 <strong>Финансы:</strong> Курсы валют и криптовалют<br>
                                🧠 <strong>Память:</strong> Запоминаю всю нашу переписку<br>
                                💬 <strong>Общение:</strong> Отвечаю на любые вопросы<br><br>
                                
                                <strong>Примеры команд:</strong><br>
                                • "Найди последние новости про ИИ"<br>
                                • "Какая погода в Москве?"<br>
                                • "Курс доллара сегодня"<br>
                                • "Расскажи про квантовые компьютеры"<br><br>
                                
                                Просто задайте любой вопрос! 🚀
                            </div>
                        </div>
                    </div>
                    
                    <div class="typing" id="typing">
                        <i class="fas fa-robot"></i>
                        <span>PRIZMA думает</span>
                        <div class="typing-dots">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>

                    <div class="input-area">
                        <div class="input-container">
                            <textarea 
                                class="message-input" 
                                id="messageInput" 
                                placeholder="Спросите что-нибудь у PRIZMA... (Enter для отправки)"
                                rows="1"
                                onkeypress="handleKeyPress(event)"
                            ></textarea>
                            <button class="send-btn" onclick="sendMessage()" id="sendBtn">
                                <i class="fas fa-paper-plane"></i> Отправить
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Theme Toggle -->
    <button class="theme-toggle" onclick="toggleTheme()" title="Переключить тему">
        <i class="fas fa-moon" id="themeIcon"></i>
    </button>

    <script>
        // ========== ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ==========
        let currentUser = null;
        let chatHistory = [];
        let currentChatId = null;
        let messageCount = 0;
        let isDarkMode = false;

        // API ключи (в продакшене должны быть на сервере)
        const API_KEYS = {
            weather: 'demo_key', // OpenWeatherMap API
            news: 'demo_key',    // NewsAPI
            search: 'demo_key',  // Bing Search API
            exchange: 'demo_key' // ExchangeRates API
        };

        // ========== ИНИЦИАЛИЗАЦИЯ ==========
        window.onload = function() {
            loadStoredData();
            initializeAPIs();
            updateAPIStatus();
        };

        // ========== АВТОРИЗАЦИЯ ==========
        function login() {
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value.trim();
            
            if (!username || !password) {
                showNotification('Пожалуйста, введите имя и пароль', 'warning');
                return;
            }

            if (username.length < 2) {
                showNotification('Имя должно содержать минимум 2 символа', 'warning');
                return;
            }

            currentUser = {
                name: username,
                isGuest: false,
                loginTime: new Date().toISOString(),
                id: generateUserId(username)
            };

            saveUserData();
            showChatInterface();
            showNotification(`Добро пожаловать, ${username}!`, 'success');
        }

        function guestLogin() {
            currentUser = {
                name: 'Гость',
                isGuest: true,
                loginTime: new Date().toISOString(),
                id: 'guest_' + Date.now()
            };

            showChatInterface();
            showNotification('Вы вошли как гость', 'info');
        }

        function logout() {
            if (confirm('Вы уверены, что хотите выйти? Несохранённые данные могут быть потеряны.')) {
                currentUser = null;
                currentChatId = null;
                messageCount = 0;
                document.getElementById('authScreen').style.display = 'flex';
                document.getElementById('chatInterface').style.display = 'none';
                document.getElementById('username').value = '';
                document.getElementById('password').value = '';
                showNotification('Вы вышли из системы', 'info');
            }
        }

        function showChatInterface() {
            document.getElementById('authScreen').style.display = 'none';
            document.getElementById('chatInterface').style.display = 'flex';
            document.getElementById('welcomeText').textContent = 
                `${currentUser.name} | PRIZMA активна`;
            
            loadChatHistory();
            if (chatHistory.length === 0) {
                startNewChat();
            } else {
                loadChat(chatHistory[0].id);
            }
            
            // Фокус на поле ввода
            document.getElementById('messageInput').focus();
        }

        // ========== ЧАТОВАЯ СИСТЕМА ==========
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;

            // Проверка длины сообщения
            if (message.length > 2000) {
                showNotification('Сообщение слишком длинное (максимум 2000 символов)', 'warning');
                return;
            }

            // Блокировка кнопки отправки
            const sendBtn = document.getElementById('sendBtn');
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<div class="loading"></div> Отправка...';

            addMessage('user', message);
            input.value = '';
            messageCount++;
            updateMessageCounter();
            
            // Показать индикатор печатания
            showTyping(true);
            
            // Генерация ответа ИИ
            setTimeout(() => {
                generateAIResponse(message);
            }, 1000 + Math.random() * 2000);

            saveChatHistory();
        }

        function addMessage(sender, content, timestamp = null) {
            const messagesContainer = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const messageTime = timestamp || new Date().toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            const icon = sender === 'user' ? 'fas fa-user' : 'fas fa-robot';
            const name = sender === 'user' ? currentUser.name : 'PRIZMA';

            messageDiv.innerHTML = `
                <div class="message-header">
                    <i class="${icon}"></i>
                    <span>${name}</span>
                    <span style="font-size: 0.8em;">${messageTime}</span>
                </div>
                <div class="message-content">${content}</div>
            `;

            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;

            // Добавить в текущий чат
            if (!currentChatId) {
                startNewChat();
            }

            const currentChat = chatHistory.find(chat => chat.id === currentChatId);
            if (currentChat) {
                currentChat.messages.push({
                    sender: sender,
                    content: content,
                    timestamp: timestamp || new Date().toISOString()
                });
                currentChat.lastMessage = content.replace(/<[^>]*>/g, '').substring(0, 50) + '...';
                currentChat.lastActivity = new Date().toISOString();
                updateHistoryDisplay();
            }
        }

        async function generateAIResponse(userMessage) {
            try {
                let response = await getAIResponse(userMessage.toLowerCase());
                
                showTyping(false);
                addMessage('assistant', response);
                
                // Разблокировка кнопки отправки
                const sendBtn = document.getElementById('sendBtn');
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Отправить';
                
                saveChatHistory();
                
            } catch (error) {
                showTyping(false);
                addMessage('assistant', '❌ Извините, произошла ошибка при обработке вашего запроса. Попробуйте ещё раз.');
                
                const sendBtn = document.getElementById('sendBtn');
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Отправить';
            }
        }

        async function getAIResponse(message) {
            // Определение типа запроса и генерация соответствующего ответа
            
            // Поиск в интернете
            if (message.includes('найди') || message.includes('поиск') || message.includes('ищи') || message.includes('найти')) {
                return await handleSearchRequest(message);
            }
            
            // Новости
            if (message.includes('новости') || message.includes('что происходит') || message.includes('события')) {
                return await handleNewsRequest(message);
            }

            // Погода
            if (message.includes('погода') || message.includes('температура') || message.includes('градус')) {
                return await handleWeatherRequest(message);
            }

            // Курсы валют
            if (message.includes('курс') || message.includes('валют') || message.includes('доллар') || message.includes('евро') || message.includes('bitcoin')) {
                return await handleExchangeRequest(message);
            }

            // Время и дата
            if (message.includes('время') || message.includes('дата') || message.includes('сегодня') || message.includes('сейчас')) {
                return handleTimeRequest(message);
            }

            // Вычисления
            if (message.includes('посчитай') || message.includes('вычисли') || /\d+[\+\-\*\/]\d+/.test(message)) {
                return handleCalculationRequest(message);
            }

            // Общие вопросы
            return handleGeneralRequest(message);
        }

        // ========== ОБРАБОТЧИКИ ЗАПРОСОВ ==========
        async function handleSearchRequest(message) {
            const searchQuery = extractSearchQuery(message);
            return `🔍 <strong>Поиск по запросу "${searchQuery}"</strong><br><br>
                    📝 В полной версии здесь будут реальные результаты поиска через Bing API<br><br>
                    Найденные результаты включали бы:<br>
                    • Актуальные веб-страницы<br>
                    • Новостные статьи<br>
                    • Википедия статьи<br>
                    • Научные публикации<br><br>
                    💡 <em>Для активации поиска нужен API ключ Bing Search</em>`;
        }

        async function handleNewsRequest(message) {
            const currentTime = new Date().toLocaleString('ru-RU');
            return `📰 <strong>Последние новости</strong> (${currentTime})<br><br>
                    🔴 <strong>В реальной версии здесь будут актуальные новости:</strong><br><br>
                    🌍 <strong>Мировые события:</strong><br>
                    • Политические новости<br>
                    • Экономические события<br>
                    • Технологические прорывы<br><br>
                    🇷🇺 <strong>Российские новости:</strong><br>
                    • Внутренняя политика<br>
                    • Экономические показатели<br>
                    • Культурные события<br><br>
                    💡 <em>Для получения актуальных новостей требуется NewsAPI ключ</em>`;
        }

        async function handleWeatherRequest(message) {
            const city = extractCityFromMessage(message) || 'Москва';
            return `🌤️ <strong>Погода в городе ${city}</strong><br><br>
                    🌡️ <strong>Текущая температура:</strong> +15°C<br>
                    💨 <strong>Ветер:</strong> 5 м/с, северо-западный<br>
                    💧 <strong>Влажность:</strong> 65%<br>
                    ☁️ <strong>Состояние:</strong> Переменная облачность<br><br>
                    📅 <strong>Прогноз на завтра:</strong><br>
                    🌅 Утром: +12°C, ясно<br>
                    ☀️ Днём: +18°C, солнечно<br>
                    🌙 Вечером: +14°C, малооблачно<br><br>
                    💡 <em>В рабочей версии данные получаются с OpenWeatherMap API</em>`;
        }

        async function handleExchangeRequest(message) {
            const currentTime = new Date().toLocaleString('ru-RU');
            return `💱 <strong>Курсы валют</strong> (${currentTime})<br><br>
                    💵 <strong>USD/RUB:</strong> 92.50 ₽ <span style="color: green;">▲ +0.45</span><br>
                    💶 <strong>EUR/RUB:</strong> 100.25 ₽ <span style="color: red;">▼ -0.23</span><br>
                    💷 <strong>GBP/RUB:</strong> 117.80 ₽ <span style="color: green;">▲ +0.15</span><br>
                    🇨🇳 <strong>CNY/RUB:</strong> 12.85 ₽ <span style="color: green;">▲ +0.08</span><br><br>
                    
                    ₿ <strong>Криптовалюты:</strong><br>
                    • Bitcoin: $43,250 <span style="color: green;">▲ +2.3%</span><br>
                    • Ethereum: $2,580 <span style="color: red;">▼ -1.1%</span><br>
                    • TON: $2.45 <span style="color: green;">▲ +5.7%</span><br><br>
                    
                    💡 <em>Реальные курсы через ExchangeRates API</em>`;
        }

        function handleTimeRequest(message) {
            const now = new Date();
            const timeString = now.toLocaleTimeString('ru-RU');
            const dateString = now.toLocaleDateString('ru-RU', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            return `🕐 <strong>Текущее время:</strong> ${timeString}<br>
                    📅 <strong>Сегодня:</strong> ${dateString}<br><br>
                    🌍 <strong>Время в других городах:</strong><br>
                    • Лондон: ${new Date().toLocaleTimeString('en-GB', {timeZone: 'Europe/London'})}<br>
                    • Нью-Йорк: ${new Date().toLocaleTimeString('en-US', {timeZone: 'America/New_York'})}<br>
                    • Токио: ${new Date().toLocaleTimeString('ja-JP', {timeZone: 'Asia/Tokyo'})}<br>
                    • Пекин: ${new Date().toLocaleTimeString('zh-CN', {timeZone: 'Asia/Shanghai'})}`;
        }

        function handleCalculationRequest(message) {
            try {
                // Простой калькулятор (безопасная реализация)
                const mathExpression = message.match(/[\d\+\-\*\/\(\)\.\s]+/g);
                if (mathExpression) {
                    const expr = mathExpression[0].trim();
                    // Базовая проверка безопасности
                    if (/^[\d\+\-\*\/\(\)\.\s]+$/.test(expr)) {
                        const result = Function('"use strict"; return (' + expr + ')')();
                        return `🧮 <strong>Вычисление:</strong><br><br>
                                📝 <strong>Выражение:</strong> ${expr}<br>
                                ✅ <strong>Результат:</strong> ${result}<br><br>
                                💡 Могу решать математические примеры, переводить единицы измерения и выполнять другие вычисления!`;
                    }
                }
            } catch (error) {
                return `❌ Не удалось выполнить вычисление. Пожалуйста, проверьте корректность математического выражения.`;
            }
            
            return `🧮 <strong>Калькулятор PRIZMA</strong><br><br>
                    Я могу выполнять различные вычисления:<br>
                    • Основные операции: +, -, *, /<br>
                    • Проценты: 150 * 0.2<br>
                    • Скобки: (10 + 5) * 3<br><br>
                    Напишите математическое выражение!`;
        }

        function handleGeneralRequest(message) {
            // Интеллектуальные ответы на основе ключевых слов
            const responses = {
                greeting: [
                    `Привет! 👋 Рад видеть вас в PRIZMA! Как дела? Чем могу помочь?`,
                    `Здравствуйте! 😊 Отлично, что вы обратились ко мне. Что вас интересует?`,
                    `Добро пожаловать! 🎉 Я готов ответить на любые ваши вопросы!`
                ],
                capabilities: [
                    `🧠 <strong>Мои возможности в PRIZMA:</strong><br><br>
                    ✅ <strong>Уже работает:</strong><br>
                    • Умные диалоги и консультации<br>
                    • Запоминание контекста беседы<br>
                    • Вычисления и логические задачи<br>
                    • Помощь с текстами и идеями<br>
                    • Работа на русском и английском<br><br>
                    🚀 <strong>Готово к подключению:</strong><br>
                    • Поиск в реальном времени<br>
                    • Актуальные новости<br>
                    • Прогноз погоды<br>
                    • Курсы валют и криптовалют<br>
                    • Интеграция с YouTube и соцсетями<br><br>
                    Что бы вы хотели обсудить?`
                ],
                help: [
                    `❓ <strong>Помощь по PRIZMA:</strong><br><br>
                    📝 <strong>Команды для поиска:</strong><br>
                    • "Найди информацию про..."<br>
                    • "Поищи последние новости о..."<br><br>
                    🌤️ <strong>Погода:</strong><br>
                    • "Какая погода в [город]?"<br>
                    • "Прогноз на завтра"<br><br>
                    💱 <strong>Финансы:</strong><br>
                    • "Курс доллара"<br>
                    • "Цена биткоина"<br><br>
                    💬 <strong>Общение:</strong><br>
                    Просто задавайте любые вопросы естественным языком!`
                ]
            };

            // Определение типа запроса
            if (message.includes('привет') || message.includes('здравствуй') || message.includes('добро пожаловать')) {
                return responses.greeting[Math.floor(Math.random() * responses.greeting.length)];
            }
            
            if (message.includes('что ты умеешь') || message.includes('возможности') || message.includes('функции')) {
                return responses.capabilities[0];
            }
            
            if (message.includes('помощь') || message.includes('help') || message.includes('как пользоваться')) {
                return responses.help[0];
            }

            // Универсальный интеллектуальный ответ
            const generalResponses = [
                `Интересный вопрос! 🤔 Давайте разберём "${message.substring(0,40)}..." подробнее.<br><br>
                 Это действительно важная тема. Чтобы дать вам максимально полезный ответ, уточните пожалуйста - какой именно аспект вас больше всего интересует?<br><br>
                 💡 Кстати, в полной версии PRIZMA я смогу найти самую актуальную информацию по этой теме в интернете!`,
                
                `Отлично! 👍 Вы спросили про "${message.substring(0,35)}..." - это очень актуальная тема.<br><br>
                 У меня есть базовые знания по этому вопросу, но для получения самой свежей и точной информации я рекомендую использовать мою функцию поиска.<br><br>
                 🔍 Напишите "Найди подробную информацию про ${message.substring(0,30)}..." и я найду всё самое важное!`,
                
                `Понял ваш запрос! 🎯 "${message.substring(0,30)}..." - действительно интересная тема для обсуждения.<br><br>
                 Я могу предложить несколько направлений для разговора об этом. Или если нужна самая актуальная информация - давайте воспользуемся поиском!<br><br>
                 ❓ Что именно вы хотели бы узнать в первую очередь?`
            ];
            
            return generalResponses[Math.floor(Math.random() * generalResponses.length)];
        }

        // ========== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ==========
        function extractSearchQuery(message) {
            const patterns = [
                /найди?\s+(.+)/i,
                /поищи?\s+(.+)/i,
                /ищи?\s+(.+)/i,
                /найти\s+(.+)/i
            ];
            
            for (let pattern of patterns) {
                const match = message.match(pattern);
                if (match) return match[1].trim();
            }
            
            return message.replace(/найди|поищи|ищи|найти/gi, '').trim();
        }

        function extractCityFromMessage(message) {
            const cities = ['москва', 'петербург', 'новосибирск', 'екатеринburg', 'казань', 'челябинск', 'омск', 'самара', 'ростов', 'уфа', 'красноярск', 'воронеж', 'пермь', 'волгоград'];
            const lowerMessage = message.toLowerCase();
            
            for (let city of cities) {
                if (lowerMessage.includes(city)) {
                    return city.charAt(0).toUpperCase() + city.slice(1);
                }
            }
            
            // Попытка найти "в городе X"
            const cityMatch = message.match(/в\s+(\w+)/i);
            if (cityMatch) return cityMatch[1];
            
            return null;
        }

        function showTyping(show) {
            const typing = document.getElementById('typing');
            typing.style.display = show ? 'flex' : 'none';
            
            if (show) {
                const messages = document.getElementById('messages');
                messages.scrollTop = messages.scrollHeight;
            }
        }

        // ========== ИСТОРИЯ ЧАТОВ ==========
        function startNewChat() {
            currentChatId = 'chat_' + Date.now();
            const newChat = {
                id: currentChatId,
                title: `Чат ${chatHistory.length + 1}`,
                messages: [],
                created: new Date().toISOString(),
                lastActivity: new Date().toISOString(),
                lastMessage: 'Новый чат создан'
            };
            
            chatHistory.unshift(newChat);
            
            // Очистить сообщения и показать приветствие
            const messagesContainer = document.getElementById('messages');
            messagesContainer.innerHTML = '';
            addMessage('assistant', `🎉 <strong>Новый чат начат!</strong><br><br>
                Я готов помочь вам с любыми вопросами. Что вас интересует?`);
            
            updateHistoryDisplay();
            saveChatHistory();
        }

        function loadChat(chatId) {
            const chat = chatHistory.find(c => c.id === chatId);
            if (!chat) return;

            currentChatId = chatId;
            const messagesContainer = document.getElementById('messages');
            messagesContainer.innerHTML = '';

            // Загрузить все сообщения чата
            chat.messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${msg.sender}`;
                
                const messageTime = new Date(msg.timestamp).toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });

                const icon = msg.sender === 'user' ? 'fas fa-user' : 'fas fa-robot';
                const name = msg.sender === 'user' ? currentUser.name : 'PRIZMA';

                messageDiv.innerHTML = `
                    <div class="message-header">
                        <i class="${icon}"></i>
                        <span>${name}</span>
                        <span style="font-size: 0.8em;">${messageTime}</span>
                    </div>
                    <div class="message-content">${msg.content}</div>
                `;
                
                messagesContainer.appendChild(messageDiv);
            });

            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            updateHistoryDisplay(); // Обновить активный чат в истории
        }

        function updateHistoryDisplay() {
            const historyContainer = document.getElementById('chatHistory');
            historyContainer.innerHTML = '';
            
            if (chatHistory.length === 0) {
                historyContainer.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #666;">
                        <i class="fas fa-comments" style="font-size: 2em; margin-bottom: 10px; opacity: 0.5;"></i><br>
                        История чатов пуста<br>
                        <small>Начните новый диалог!</small>
                    </div>
                `;
                return;
            }
            
            chatHistory.forEach(chat => {
                const historyItem = document.createElement('div');
                historyItem.className = `history-item ${chat.id === currentChatId ? 'active' : ''}`;
                historyItem.innerHTML = `
                    <div style="font-weight: bold; margin-bottom: 5px; display: flex; justify-content: space-between; align-items: center;">
                        <span>${chat.title}</span>
                        <span style="font-size: 0.8em; font-weight: normal;">${chat.messages.length}</span>
                    </div>
                    <div style="font-size: 0.9em; color: ${chat.id === currentChatId ? 'rgba(255,255,255,0.8)' : '#666'}; margin-bottom: 5px;">
                        ${chat.lastMessage}
                    </div>
                    <div style="font-size: 0.8em; color: ${chat.id === currentChatId ? 'rgba(255,255,255,0.6)' : '#999'};">
                        <i class="fas fa-clock"></i> ${new Date(chat.lastActivity).toLocaleDateString('ru-RU')}
                    </div>
                `;
                historyItem.onclick = () => loadChat(chat.id);
                historyContainer.appendChild(historyItem);
            });
        }

        // ========== УВЕДОМЛЕНИЯ ==========
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 80px;
                right: 20px;
                background: white;
                padding: 15px 20px;
                border-radius: 10px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                z-index: 1000;
                max-width: 300px;
                border-left: 4px solid ${type === 'success' ? '#28a745' : type === 'warning' ? '#ffc107' : type === 'error' ? '#dc3545' : '#17a2b8'};
                animation: slideIn 0.3s ease;
            `;

            const icons = {
                success: 'fas fa-check-circle',
                warning: 'fas fa-exclamation-triangle', 
                error: 'fas fa-times-circle',
                info: 'fas fa-info-circle'
            };

            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="${icons[type]}" style="color: ${type === 'success' ? '#28a745' : type === 'warning' ? '#ffc107' : type === 'error' ? '#dc3545' : '#17a2b8'};"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // ========== ОБРАБОТКА ВВОДА ==========
        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        // Автоматическое изменение размера текстового поля
        document.getElementById('messageInput').addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 150) + 'px';
        });

        // ========== СИСТЕМА СОХРАНЕНИЯ ==========
        function generateUserId(username) {
            return 'user_' + btoa(username).replace(/[^a-zA-Z0-9]/g, '') + '_' + Date.now();
        }

        function saveUserData() {
            if (currentUser && !currentUser.isGuest) {
                const userData = {
                    user: currentUser,
                    chatHistory: chatHistory,
                    savedAt: new Date().toISOString()
                };
                
                try {
                    // В реальной версии здесь будет отправка на сервер
                    console.log('💾 Данные пользователя сохранены:', userData);
                    showNotification('Данные сохранены', 'success');
                } catch (error) {
                    console.error('Ошибка сохранения:', error);
                    showNotification('Ошибка сохранения данных', 'error');
                }
            }
        }

        function saveChatHistory() {
            if (currentUser) {
                // Автосохранение каждые 30 секунд
                clearTimeout(window.saveTimeout);
                window.saveTimeout = setTimeout(() => {
                    if (!currentUser.isGuest) {
                        saveUserData();
                    }
                }, 30000);
            }
        }

        function loadStoredData() {
            // В реальной версии здесь будет загрузка с сервера
            console.log('📥 Загрузка сохранённых данных...');
        }

        // ========== API СТАТУС ==========
        function initializeAPIs() {
            // Имитация инициализации API
            console.log('🔌 Инициализация API сервисов...');
        }

        function updateAPIStatus() {
            const statusElement = document.getElementById('apiStatus');
            // В реальной версии здесь будет проверка доступности API
            statusElement.className = 'api-status online';
            statusElement.innerHTML = '<i class="fas fa-circle"></i><span>PRIZMA Online</span>';
        }

        function updateMessageCounter() {
            document.getElementById('messageCounter').textContent = `${messageCount} сообщений`;
        }

        // ========== ТЕМНАЯ ТЕМА ==========
        function toggleTheme() {
            isDarkMode = !isDarkMode;
            const themeIcon = document.getElementById('themeIcon');
            
            if (isDarkMode) {
                document.body.style.filter = 'invert(1) hue-rotate(180deg)';
                themeIcon.className = 'fas fa-sun';
                showNotification('Тёмная тема включена', 'info');
            } else {
                document.body.style.filter = 'none';
                themeIcon.className = 'fas fa-moon';
                showNotification('Светлая тема включена', 'info');
            }
        }

        // ========== ДОПОЛНИТЕЛЬНЫЕ СТИЛИ ==========
        const additionalStyles = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;

        // Добавление дополнительных стилей
        const styleSheet = document.createElement('style');
        styleSheet.textContent = additionalStyles;
        document.head.appendChild(styleSheet);

        // ========== ИНИЦИАЛИЗАЦИЯ ЗАВЕРШЕНА ==========
        console.log('🚀 PRIZMA успешно инициализирована!');
    </script>
</body>
</html>